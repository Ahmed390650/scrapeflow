generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
model Workflow{
  id     String @id @default(cuid())
  userId String 
  name   String
  description String?
  definition String
  status String
  lastRunId String?
  lastRunStatus String?
  lastRunAt DateTime?

  executions WorkflowExecution[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@unique([userId, name])
}
model WorkflowExecution{
  id String @id @default(cuid())
  userId String 
  status String
  trigger String
  createdAt DateTime @default(now())
  startAt DateTime?
  completedAt DateTime?

  definition String @default("{}")
  workflowId String
  workflow Workflow @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  phases ExecutionPhase[]
  creditsConsumed Int? @default(0)
}
model ExecutionPhase{
  id String @id @default(cuid())
  userId String 
  status String
  number Int
  node String
  name String
  startAt DateTime?
  completedAt DateTime?
  inputs String?
  outputs String?
  creditsConsumed Int?
  workflowExecutionId String
  execution WorkflowExecution @relation(fields: [workflowExecutionId], references: [id], onDelete: Cascade)

  logs  ExecutionLog[]
}
model ExecutionLog {
  id String @id @default(cuid())
  message String
  logLevel String
  timestamp DateTime @default(now())

  executionPhaseId String
  executionPhase ExecutionPhase @relation(fields: [executionPhaseId],references: [id],onDelete: Cascade)
}